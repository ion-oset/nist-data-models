# generated by datamodel-codegen:
#   filename:  NIST_V2_election_results_reporting.json

# Notes:
# - Enumerations precede class models.
# - Class models are kept as close as possible to alphabetical order.
# - Quoted forward declarations are avoided, except when a class refers to itself.
# - Models with date/time fields that have patterns have to choose between:
#   - Accepting only valid date formats.
#   - Allowing the user to manipulate them as date/times.
#   Technically the first is the correct choice, but the usability benefit of
#   actual date/time types is substantial so tentatively going with the latter.
#   The correct solution is probably a custom type.


from __future__ import annotations

from datetime import date, datetime, time
from enum import Enum
from typing import List, Optional, Union

from pydantic import AnyUrl, Extra, Field
# Note: *not* StrictFloat
from pydantic import StrictBool, StrictInt, StrictStr
try:
    from typing_extensions import Literal
except:
    from typing import Literal

from electos.datamodels.nist.models.base import NistModel


# --- Enumerations


class BallotMeasureType(Enum):

    BALLOT_MEASURE = "ballot-measure"
    INITIATIVE = "initiative"
    OTHER = "other"
    RECALL = "recall"
    REFERENDUM = "referendum"


class CandidatePostElectionStatus(Enum):

    ADVANCED_TO_RUNOFF = "advanced-to-runoff"
    DEFEATED = "defeated"
    PROJECTED_WINNER = "projected-winner"
    WINNER = "winner"
    WITHDRAWN = "withdrawn"


class CandidatePreElectionStatus(Enum):

    FILED = "filed"
    QUALIFIED = "qualified"
    WITHDRAWN = "withdrawn"


class CountItemStatus(Enum):

    COMPLETED = "completed"
    IN_PROCESS = "in-process"
    NOT_PROCESSED = "not-processed"
    UNKNOWN = "unknown"


class CountItemType(Enum):

    ABSENTEE = "absentee"
    ABSENTEE_FWAB = "absentee-fwab"
    ABSENTEE_IN_PERSON = "absentee-in-person"
    ABSENTEE_MAIL = "absentee-mail"
    EARLY = "early"
    ELECTION_DAY = "election-day"
    OTHER = "other"
    PROVISIONAL = "provisional"
    SEATS = "seats"
    TOTAL = "total"
    UOCAVA = "uocava"
    WRITE_IN = "write-in"


class DayType(Enum):

    ALL = "all"
    FRIDAY = "friday"
    MONDAY = "monday"
    SATURDAY = "saturday"
    SUNDAY = "sunday"
    THURSDAY = "thursday"
    TUESDAY = "tuesday"
    WEDNESDAY = "wednesday"
    WEEKDAY = "weekday"
    WEEKEND = "weekend"


class DeviceType(Enum):

    BMD = "bmd"
    DRE = "dre"
    MANUAL_COUNT = "manual-count"
    OPSCAN_CENTRAL = "opscan-central"
    OPSCAN_PRECINCT = "opscan-precinct"
    OTHER = "other"
    UNKNOWN = "unknown"


class ElectionType(Enum):

    GENERAL = "general"
    OTHER = "other"
    PARTISAN_PRIMARY_CLOSED = "partisan-primary-closed"
    PARTISAN_PRIMARY_OPEN = "partisan-primary-open"
    PRIMARY = "primary"
    RUNOFF = "runoff"
    SPECIAL = "special"


class GeoSpatialFormat(Enum):

    GEO_JSON = "geo-json"
    GML = "gml"
    KML = "kml"
    SHP = "shp"
    WKT = "wkt"


class IdentifierType(Enum):

    FIPS = "fips"
    LOCAL_LEVEL = "local-level"
    NATIONAL_LEVEL = "national-level"
    OCD_ID = "ocd-id"
    OTHER = "other"
    STATE_LEVEL = "state-level"


class OfficeTermType(Enum):

    FULL_TERM = "full-term"
    UNEXPIRED_TERM = "unexpired-term"


class ReportDetailLevel(Enum):

    PRECINCT_LEVEL = "precinct-level"
    SUMMARY_CONTEST = "summary-contest"


class ReportingUnitType(Enum):

    BALLOT_BATCH = "ballot-batch"
    BALLOT_STYLE_AREA = "ballot-style-area"
    BOROUGH = "borough"
    CITY = "city"
    CITY_COUNCIL = "city-council"
    COMBINED_PRECINCT = "combined-precinct"
    CONGRESSIONAL = "congressional"
    COUNTRY = "country"
    COUNTY = "county"
    COUNTY_COUNCIL = "county-council"
    DROP_BOX = "drop-box"
    JUDICIAL = "judicial"
    MUNICIPALITY = "municipality"
    OTHER = "other"
    POLLING_PLACE = "polling-place"
    PRECINCT = "precinct"
    SCHOOL = "school"
    SPECIAL = "special"
    SPLIT_PRECINCT = "split-precinct"
    STATE = "state"
    STATE_HOUSE = "state-house"
    STATE_SENATE = "state-senate"
    TOWN = "town"
    TOWNSHIP = "township"
    UTILITY = "utility"
    VILLAGE = "village"
    VOTE_CENTER = "vote-center"
    WARD = "ward"
    WATER = "water"


class ResultsStatus(Enum):

    CERTIFIED = "certified"
    CORRECTION = "correction"
    PRE_ELECTION = "pre-election"
    RECOUNT = "recount"
    UNOFFICIAL_COMPLETE = "unofficial-complete"
    UNOFFICIAL_PARTIAL = "unofficial-partial"


class VoteVariation(Enum):

    APPROVAL = "approval"
    BORDA = "borda"
    CUMULATIVE = "cumulative"
    MAJORITY = "majority"
    N_OF_M = "n-of-m"
    OTHER = "other"
    PLURALITY = "plurality"
    PROPORTIONAL = "proportional"
    RANGE = "range"
    RCV = "rcv"
    SUPER_MAJORITY = "super-majority"


# --- Models


# Basic models don't depend on other class models.


class LanguageString(NistModel):

    model__type: Literal["ElectionResults.LanguageString"] = Field(..., alias="@type")

    content: StrictStr
    language: StrictStr


class InternationalizedText(NistModel):

    model__type: Literal["ElectionResults.InternationalizedText"] = Field(..., alias="@type")

    label: Optional[StrictStr] = None
    text: List[LanguageString] = Field(..., min_items=1)


class ShortString(NistModel):

    __root__: str = Field(..., max_length=32)


class SpatialExtent(NistModel):

    model__type: Literal["ElectionResults.SpatialExtent"] = Field(..., alias="@type")

    coordinates: StrictStr
    format: GeoSpatialFormat


class TimeWithZone(NistModel):

    __root__: time
    # Field(
    #     ...,
    #     regex="(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]|(24:00:00))(Z|[+-]((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
    # )


# Classes with minimal dependencies.


class AnnotatedString(NistModel):

    model__type: Literal["ElectionResults.AnnotatedString"] = Field(..., alias="@type")

    annotation: Optional[ShortString] = None
    content: StrictStr


class AnnotatedUri(NistModel):

    model__type: Literal["ElectionResults.AnnotatedUri"] = Field(..., alias="@type")

    annotation: Optional[ShortString] = None
    content: AnyUrl


class CountStatus(NistModel):

    model__type: Literal["ElectionResults.CountStatus"] = Field(..., alias="@type")

    other_type: Optional[StrictStr] = None
    status: CountItemStatus
    type: CountItemType


class DateTimeWithZone(NistModel):

    __root__: datetime
    # Field(
    #     ...,
    #     regex="[0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]|(24:00:00))(Z|[+-]((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
    # )


class DeviceClass(NistModel):

    model__type: Literal["ElectionResults.DeviceClass"] = Field(..., alias="@type")

    manufacturer: Optional[StrictStr] = None
    model: Optional[StrictStr] = None
    other_type: Optional[StrictStr] = None
    type: Optional[DeviceType] = None


class ExternalIdentifier(NistModel):

    model__type: Literal["ElectionResults.ExternalIdentifier"] = Field(..., alias="@type")

    label: Optional[StrictStr] = None
    other_type: Optional[StrictStr] = None
    type: IdentifierType
    value: StrictStr


class Header(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.Header"] = Field(..., alias="@type")

    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    name: InternationalizedText


class HtmlColorString(NistModel):

    __root__: str = Field(..., regex="[0-9a-f]{6}")


class Hours(NistModel):

    model__type: Literal["ElectionResults.Hours"] = Field(..., alias="@type")

    day: Optional[DayType] = None
    end_time: TimeWithZone
    label: Optional[StrictStr] = None
    start_time: TimeWithZone


class LatLng(NistModel):

    model__type: Literal["ElectionResults.LatLng"] = Field(..., alias="@type")

    label: Optional[StrictStr] = None
    latitude: float
    longitude: float
    source: Optional[StrictStr] = None


class Office(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.Office"] = Field(..., alias="@type")

    contact_information: Optional[ContactInformation] = None
    description: Optional[InternationalizedText] = None
    election_district_id: Optional[StrictStr] = None
    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    filing_deadline: Optional[date] = None
    is_partisan: Optional[StrictBool] = None
    name: InternationalizedText
    office_holder_person_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    term: Optional[Term] = None


class OfficeGroup(NistModel):

    model__type: Literal["ElectionResults.OfficeGroup"] = Field(..., alias="@type")

    label: Optional[StrictStr] = None
    name: StrictStr
    office_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    sub_office_group: Optional[List[OfficeGroup]] = None

OfficeGroup.update_forward_refs()


class OrderedContest(NistModel):

    model__type: Literal["ElectionResults.OrderedContest"] = Field(..., alias="@type")

    contest_id: StrictStr
    ordered_contest_selection_ids: Optional[List[StrictStr]] = Field(None, min_items=0)


class OrderedHeader(NistModel):

    model__type: Literal["ElectionResults.OrderedHeader"] = Field(..., alias="@type")

    header_id: StrictStr
    ordered_content: Optional[List[Union[OrderedContest, OrderedHeader]]] = None

OrderedHeader.update_forward_refs()


class OtherCounts(NistModel):

    model__type: Literal["ElectionResults.OtherCounts"] = Field(..., alias="@type")

    device_class: Optional[DeviceClass] = None
    gp_unit_id: StrictStr
    overvotes: Optional[float] = None
    undervotes: Optional[float] = None
    write_ins: Optional[StrictInt] = None


class PartyRegistration(NistModel):

    model__type: Literal["ElectionResults.PartyRegistration"] = Field(..., alias="@type")

    count: StrictInt
    party_id: StrictStr


class ReportingDevice(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.ReportingDevice"] = Field(..., alias="@type")

    composing_gp_unit_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    device_class: Optional[DeviceClass] = None
    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    name: Optional[InternationalizedText] = None
    serial_number: Optional[StrictStr] = None


class Schedule(NistModel):

    model__type: Literal["ElectionResults.Schedule"] = Field(..., alias="@type")

    end_date: Optional[date] = None
    hours: Optional[List[Hours]] = Field(None, min_items=0)
    is_only_by_appointment: Optional[StrictBool] = None
    is_or_by_appointment: Optional[StrictBool] = None
    is_subject_to_change: Optional[StrictBool] = None
    label: Optional[StrictStr] = None
    start_date: Optional[date] = None


class SpatialDimension(NistModel):

    model__type: Literal["ElectionResults.SpatialDimension"] = Field(..., alias="@type")

    map_uri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)
    spatial_extent: Optional[SpatialExtent] = None


class Term(NistModel):

    model__type: Literal["ElectionResults.Term"] = Field(..., alias="@type")

    end_date: Optional[date] = None
    label: Optional[StrictStr] = None
    start_date: Optional[date] = None
    type: Optional[OfficeTermType] = None


class VoteCounts(NistModel):

    model__type: Literal["ElectionResults.VoteCounts"] = Field(..., alias="@type")

    count: float
    device_class: Optional[DeviceClass] = None
    gp_unit_id: StrictStr
    is_suppressed_for_privacy: Optional[StrictBool] = None
    other_type: Optional[StrictStr] = None
    round: Optional[StrictInt] = None
    type: CountItemType


# Election elements: ballots, candidates, contests, parties, people


class BallotCounts(NistModel):

    model__type: Literal["ElectionResults.BallotCounts"] = Field(..., alias="@type")

    ballots_cast: Optional[StrictInt] = None
    ballots_outstanding: Optional[StrictInt] = None
    ballots_rejected: Optional[StrictInt] = None
    device_class: Optional[DeviceClass] = None
    gp_unit_id: StrictStr
    is_suppressed_for_privacy: Optional[StrictBool] = None
    other_type: Optional[StrictStr] = None
    round: Optional[StrictInt] = None
    type: CountItemType


class BallotMeasureSelection(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.BallotMeasureSelection"] = Field(..., alias="@type")

    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    selection: InternationalizedText
    sequence_order: Optional[StrictInt] = None
    vote_counts: Optional[List[VoteCounts]] = Field(None, min_items=0)


class BallotStyle(NistModel):

    model__type: Literal["ElectionResults.BallotStyle"] = Field(..., alias="@type")

    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    gp_unit_ids: List[StrictStr] = Field(..., min_items=1)
    image_uri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)
    ordered_content: Optional[List[Union[OrderedContest, OrderedHeader]]] = Field(
        None, min_items=0
    )
    party_ids: Optional[List[StrictStr]] = Field(None, min_items=0)


class Candidate(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.Candidate"] = Field(..., alias="@type")

    ballot_name: InternationalizedText
    campaign_slogan: Optional[InternationalizedText] = None
    contact_information: Optional[ContactInformation] = None
    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    file_date: Optional[date] = None
    is_incumbent: Optional[StrictBool] = None
    is_top_ticket: Optional[StrictBool] = None
    party_id: Optional[StrictStr] = None
    person_id: Optional[StrictStr] = None
    post_election_status: Optional[CandidatePostElectionStatus] = None
    pre_election_status: Optional[CandidatePreElectionStatus] = None


class CandidateSelection(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.CandidateSelection"] = Field(..., alias="@type")

    candidate_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    endorsement_party_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    is_write_in: Optional[StrictBool] = None
    sequence_order: Optional[StrictInt] = None
    vote_counts: Optional[List[VoteCounts]] = Field(None, min_items=0)


class Coalition(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.Coalition"] = Field(..., alias="@type")

    abbreviation: Optional[InternationalizedText] = None
    color: Optional[HtmlColorString] = None
    contact_information: Optional[ContactInformation] = None
    contest_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    is_recognized_party: Optional[StrictBool] = None
    leader_person_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    logo_uri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)
    name: InternationalizedText
    party_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    party_scope_gp_unit_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    slogan: Optional[InternationalizedText] = None


class ContactInformation(NistModel):

    model__type: Literal["ElectionResults.ContactInformation"] = Field(..., alias="@type")

    address_line: Optional[List[StrictStr]] = Field(None, min_items=0)
    directions: Optional[InternationalizedText] = None
    email: Optional[List[AnnotatedString]] = Field(None, min_items=0)
    fax: Optional[List[AnnotatedString]] = Field(None, min_items=0)
    label: Optional[StrictStr] = None
    lat_lng: Optional[LatLng] = None
    name: Optional[StrictStr] = None
    phone: Optional[List[AnnotatedString]] = Field(None, min_items=0)
    schedule: Optional[List[Schedule]] = Field(None, min_items=0)
    uri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)


class ElectionAdministration(NistModel):

    model__type: Literal["ElectionResults.ElectionAdministration"] = Field(..., alias="@type")

    contact_information: Optional[ContactInformation] = None
    election_official_person_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    name: Optional[StrictStr] = None


class Party(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.Party"] = Field(..., alias="@type")

    abbreviation: Optional[InternationalizedText] = None
    color: Optional[HtmlColorString] = None
    contact_information: Optional[ContactInformation] = None
    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    is_recognized_party: Optional[StrictBool] = None
    leader_person_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    logo_uri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)
    name: InternationalizedText
    party_scope_gp_unit_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    slogan: Optional[InternationalizedText] = None


class PartySelection(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.PartySelection"] = Field(..., alias="@type")

    party_ids: List[StrictStr] = Field(..., min_items=1)
    sequence_order: Optional[StrictInt] = None
    vote_counts: Optional[List[VoteCounts]] = Field(None, min_items=0)


class Person(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.Person"] = Field(..., alias="@type")

    contact_information: Optional[List[ContactInformation]] = Field(None, min_items=0)
    date_of_birth: Optional[date] = None
    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    first_name: Optional[StrictStr] = None
    full_name: Optional[InternationalizedText] = None
    gender: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    middle_name: Optional[List[StrictStr]] = Field(None, min_items=0)
    nickname: Optional[StrictStr] = None
    party_id: Optional[StrictStr] = None
    prefix: Optional[StrictStr] = None
    profession: Optional[InternationalizedText] = None
    suffix: Optional[StrictStr] = None
    title: Optional[InternationalizedText] = None


class ReportingUnit(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.ReportingUnit"] = Field(..., alias="@type")

    authority_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    composing_gp_unit_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    contact_information: Optional[ContactInformation] = None
    count_status: Optional[List[CountStatus]] = Field(None, min_items=0)
    election_administration: Optional[ElectionAdministration] = None
    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    is_districted: Optional[StrictBool] = None
    is_mail_only: Optional[StrictBool] = None
    name: Optional[InternationalizedText] = None
    number: Optional[StrictStr] = None
    other_type: Optional[StrictStr] = None
    party_registration: Optional[List[PartyRegistration]] = Field(None, min_items=0)
    spatial_dimension: Optional[SpatialDimension] = None
    sub_units_reported: Optional[StrictInt] = None
    total_sub_units: Optional[StrictInt] = None
    type: ReportingUnitType
    voters_participated: Optional[StrictInt] = None
    voters_registered: Optional[StrictInt] = None


# Contests


class BallotMeasureContest(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.BallotMeasureContest"] = Field(..., alias="@type")

    abbreviation: Optional[StrictStr] = None
    ballot_sub_title: Optional[InternationalizedText] = None
    ballot_title: Optional[InternationalizedText] = None
    con_statement: Optional[InternationalizedText] = None
    contest_selection: Optional[
        List[Union[PartySelection, BallotMeasureSelection, CandidateSelection]]
    ] = Field(None, min_items=0)
    count_status: Optional[List[CountStatus]] = Field(None, min_items=0)
    effect_of_abstain: Optional[InternationalizedText] = None
    election_district_id: StrictStr
    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    full_text: Optional[InternationalizedText] = None
    has_rotation: Optional[StrictBool] = None
    info_uri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)
    name: StrictStr
    other_counts: Optional[List[OtherCounts]] = Field(None, min_items=0)
    other_type: Optional[StrictStr] = None
    other_vote_variation: Optional[StrictStr] = None
    passage_threshold: Optional[InternationalizedText] = None
    pro_statement: Optional[InternationalizedText] = None
    sequence_order: Optional[StrictInt] = None
    sub_units_reported: Optional[StrictInt] = None
    summary_text: Optional[InternationalizedText] = None
    total_sub_units: Optional[StrictInt] = None
    type: Optional[BallotMeasureType] = None
    vote_variation: Optional[VoteVariation] = None


class CandidateContest(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.CandidateContest"] = Field(..., alias="@type")

    abbreviation: Optional[StrictStr] = None
    ballot_sub_title: Optional[InternationalizedText] = None
    ballot_title: Optional[InternationalizedText] = None
    contest_selection: Optional[
        List[Union[PartySelection, BallotMeasureSelection, CandidateSelection]]
    ] = Field(None, min_items=0)
    count_status: Optional[List[CountStatus]] = Field(None, min_items=0)
    election_district_id: StrictStr
    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    has_rotation: Optional[StrictBool] = None
    name: StrictStr
    number_elected: Optional[StrictInt] = None
    number_runoff: Optional[StrictInt] = None
    office_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    other_counts: Optional[List[OtherCounts]] = Field(None, min_items=0)
    other_vote_variation: Optional[StrictStr] = None
    primary_party_ids: Optional[List[StrictStr]] = Field(None, min_items=0)
    sequence_order: Optional[StrictInt] = None
    sub_units_reported: Optional[StrictInt] = None
    total_sub_units: Optional[StrictInt] = None
    vote_variation: Optional[VoteVariation] = None
    votes_allowed: StrictInt


class PartyContest(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.PartyContest"] = Field(..., alias="@type")

    abbreviation: Optional[StrictStr] = None
    ballot_sub_title: Optional[InternationalizedText] = None
    ballot_title: Optional[InternationalizedText] = None
    contest_selection: Optional[
        List[Union[PartySelection, BallotMeasureSelection, CandidateSelection]]
    ] = Field(None, min_items=0)
    count_status: Optional[List[CountStatus]] = Field(None, min_items=0)
    election_district_id: StrictStr
    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    has_rotation: Optional[StrictBool] = None
    name: StrictStr
    other_counts: Optional[List[OtherCounts]] = Field(None, min_items=0)
    other_vote_variation: Optional[StrictStr] = None
    sequence_order: Optional[StrictInt] = None
    sub_units_reported: Optional[StrictInt] = None
    total_sub_units: Optional[StrictInt] = None
    vote_variation: Optional[VoteVariation] = None


class RetentionContest(NistModel):

    model__id: StrictStr = Field(..., alias="@id")
    model__type: Literal["ElectionResults.RetentionContest"] = Field(..., alias="@type")

    abbreviation: Optional[StrictStr] = None
    ballot_sub_title: Optional[InternationalizedText] = None
    ballot_title: Optional[InternationalizedText] = None
    candidate_id: StrictStr
    con_statement: Optional[InternationalizedText] = None
    contest_selection: Optional[
        List[Union[PartySelection, BallotMeasureSelection, CandidateSelection]]
    ] = Field(None, min_items=0)
    count_status: Optional[List[CountStatus]] = Field(None, min_items=0)
    effect_of_abstain: Optional[InternationalizedText] = None
    election_district_id: StrictStr
    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    full_text: Optional[InternationalizedText] = None
    has_rotation: Optional[StrictBool] = None
    info_uri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)
    name: StrictStr
    office_id: Optional[StrictStr] = None
    other_counts: Optional[List[OtherCounts]] = Field(None, min_items=0)
    other_type: Optional[StrictStr] = None
    other_vote_variation: Optional[StrictStr] = None
    passage_threshold: Optional[InternationalizedText] = None
    pro_statement: Optional[InternationalizedText] = None
    sequence_order: Optional[StrictInt] = None
    sub_units_reported: Optional[StrictInt] = None
    summary_text: Optional[InternationalizedText] = None
    total_sub_units: Optional[StrictInt] = None
    type: Optional[BallotMeasureType] = None
    vote_variation: Optional[VoteVariation] = None


# Elections


class Election(NistModel):

    model__type: Literal["ElectionResults.Election"] = Field(..., alias="@type")

    ballot_counts: Optional[List[BallotCounts]] = Field(None, min_items=0)
    ballot_style: Optional[List[BallotStyle]] = Field(None, min_items=0)
    candidate: Optional[List[Candidate]] = Field(None, min_items=0)
    contact_information: Optional[ContactInformation] = None
    contest: Optional[
        List[
            Union[
                PartyContest, BallotMeasureContest, CandidateContest, RetentionContest
            ]
        ]
    ] = Field(None, min_items=0)
    count_status: Optional[List[CountStatus]] = Field(None, min_items=0)
    election_scope_id: StrictStr
    end_date: date
    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    name: InternationalizedText
    other_type: Optional[StrictStr] = None
    start_date: date
    type: ElectionType


class ElectionReport(NistModel):

    model__type: Literal["ElectionResults.ElectionReport"] = Field(..., alias="@type")

    election: Optional[List[Election]] = Field(None, min_items=0)
    external_identifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    format: ReportDetailLevel
    generated_date: DateTimeWithZone
    gp_unit: Optional[List[Union[ReportingDevice, ReportingUnit]]] = Field(
        None, min_items=0
    )
    header: Optional[List[Header]] = Field(None, min_items=0)
    is_test: Optional[StrictBool] = None
    issuer: StrictStr
    issuer_abbreviation: StrictStr
    notes: Optional[StrictStr] = None
    office: Optional[List[Office]] = Field(None, min_items=0)
    office_group: Optional[List[OfficeGroup]] = Field(None, min_items=0)
    party: Optional[List[Union[Party, Coalition]]] = Field(None, min_items=0)
    person: Optional[List[Person]] = Field(None, min_items=0)
    sequence_end: StrictInt
    sequence_start: StrictInt
    status: ResultsStatus
    test_type: Optional[StrictStr] = None
    vendor_application_id: StrictStr
