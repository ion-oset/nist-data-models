# generated by datamodel-codegen:
#   filename:  NIST_V2_election_results_reporting.json

from __future__ import annotations

from datetime import date, datetime, time
from enum import Enum
from typing import List, Optional, Union

from pydantic import AnyUrl, BaseModel, Extra, Field
from typing_extensions import Literal


class BallotMeasureType(Enum):
    ballot_measure = 'ballot-measure'
    initiative = 'initiative'
    other = 'other'
    recall = 'recall'
    referendum = 'referendum'


class CandidatePostElectionStatus(Enum):
    advanced_to_runoff = 'advanced-to-runoff'
    defeated = 'defeated'
    projected_winner = 'projected-winner'
    winner = 'winner'
    withdrawn = 'withdrawn'


class CandidatePreElectionStatus(Enum):
    filed = 'filed'
    qualified = 'qualified'
    withdrawn = 'withdrawn'


class CountItemStatus(Enum):
    completed = 'completed'
    in_process = 'in-process'
    not_processed = 'not-processed'
    unknown = 'unknown'


class CountItemType(Enum):
    absentee = 'absentee'
    absentee_fwab = 'absentee-fwab'
    absentee_in_person = 'absentee-in-person'
    absentee_mail = 'absentee-mail'
    early = 'early'
    election_day = 'election-day'
    other = 'other'
    provisional = 'provisional'
    seats = 'seats'
    total = 'total'
    uocava = 'uocava'
    write_in = 'write-in'


class CountStatus(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.CountStatus'] = Field(..., alias='@type')
    OtherType: Optional[str] = None
    Status: CountItemStatus
    Type: CountItemType


class DateTimeWithZone(BaseModel):
    __root__: datetime # = Field(
        # ...,
        # regex='[0-9]{4}-(0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])T(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]|(24:00:00))(Z|[+-]((0[0-9]|1[0-3]):[0-5][0-9]|14:00))',
    #)


class DayType(Enum):
    all = 'all'
    friday = 'friday'
    monday = 'monday'
    saturday = 'saturday'
    sunday = 'sunday'
    thursday = 'thursday'
    tuesday = 'tuesday'
    wednesday = 'wednesday'
    weekday = 'weekday'
    weekend = 'weekend'


class DeviceType(Enum):
    bmd = 'bmd'
    dre = 'dre'
    manual_count = 'manual-count'
    opscan_central = 'opscan-central'
    opscan_precinct = 'opscan-precinct'
    other = 'other'
    unknown = 'unknown'


class ElectionType(Enum):
    general = 'general'
    other = 'other'
    partisan_primary_closed = 'partisan-primary-closed'
    partisan_primary_open = 'partisan-primary-open'
    primary = 'primary'
    runoff = 'runoff'
    special = 'special'


class GeoSpatialFormat(Enum):
    geo_json = 'geo-json'
    gml = 'gml'
    kml = 'kml'
    shp = 'shp'
    wkt = 'wkt'


class HtmlColorString(BaseModel):
    __root__: str = Field(..., regex='[0-9a-f]{6}')


class IdentifierType(Enum):
    fips = 'fips'
    local_level = 'local-level'
    national_level = 'national-level'
    ocd_id = 'ocd-id'
    other = 'other'
    state_level = 'state-level'


class LanguageString(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.LanguageString'] = Field(..., alias='@type')
    Content: str
    Language: str


class LatLng(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.LatLng'] = Field(..., alias='@type')
    Label: Optional[str] = None
    Latitude: float
    Longitude: float
    Source: Optional[str] = None


class OfficeGroup(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.OfficeGroup'] = Field(..., alias='@type')
    Label: Optional[str] = None
    Name: str
    OfficeIds: Optional[List[str]] = Field(None, min_items=0)
    SubOfficeGroup: Optional[List[OfficeGroup]] = None


class OfficeTermType(Enum):
    full_term = 'full-term'
    unexpired_term = 'unexpired-term'


class OrderedContest(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.OrderedContest'] = Field(..., alias='@type')
    ContestId: str
    OrderedContestSelectionIds: Optional[List[str]] = Field(None, min_items=0)


class OrderedHeader(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.OrderedHeader'] = Field(..., alias='@type')
    HeaderId: str
    OrderedContent: Optional[List[Union[OrderedContest, OrderedHeader]]] = None


class PartyRegistration(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.PartyRegistration'] = Field(..., alias='@type')
    Count: int
    PartyId: str


class ReportDetailLevel(Enum):
    precinct_level = 'precinct-level'
    summary_contest = 'summary-contest'


class ReportingUnitType(Enum):
    ballot_batch = 'ballot-batch'
    ballot_style_area = 'ballot-style-area'
    borough = 'borough'
    city = 'city'
    city_council = 'city-council'
    combined_precinct = 'combined-precinct'
    congressional = 'congressional'
    country = 'country'
    county = 'county'
    county_council = 'county-council'
    drop_box = 'drop-box'
    judicial = 'judicial'
    municipality = 'municipality'
    other = 'other'
    polling_place = 'polling-place'
    precinct = 'precinct'
    school = 'school'
    special = 'special'
    split_precinct = 'split-precinct'
    state = 'state'
    state_house = 'state-house'
    state_senate = 'state-senate'
    town = 'town'
    township = 'township'
    utility = 'utility'
    village = 'village'
    vote_center = 'vote-center'
    ward = 'ward'
    water = 'water'


class ResultsStatus(Enum):
    certified = 'certified'
    correction = 'correction'
    pre_election = 'pre-election'
    recount = 'recount'
    unofficial_complete = 'unofficial-complete'
    unofficial_partial = 'unofficial-partial'


class ShortString(BaseModel):
    __root__: str = Field(..., max_length=32)


class SpatialExtent(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.SpatialExtent'] = Field(..., alias='@type')
    Coordinates: str
    Format: GeoSpatialFormat


class Term(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.Term'] = Field(..., alias='@type')
    EndDate: Optional[date] = None
    Label: Optional[str] = None
    StartDate: Optional[date] = None
    Type: Optional[OfficeTermType] = None


class TimeWithZone(BaseModel):
    __root__: time # = Field(
        # ...,
        # regex='(([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]|(24:00:00))(Z|[+-]((0[0-9]|1[0-3]):[0-5][0-9]|14:00))',
    #)


class VoteVariation(Enum):
    approval = 'approval'
    borda = 'borda'
    cumulative = 'cumulative'
    majority = 'majority'
    n_of_m = 'n-of-m'
    other = 'other'
    plurality = 'plurality'
    proportional = 'proportional'
    range = 'range'
    rcv = 'rcv'
    super_majority = 'super-majority'


class AnnotatedString(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.AnnotatedString'] = Field(..., alias='@type')
    Annotation: Optional[ShortString] = None
    Content: str


class AnnotatedUri(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.AnnotatedUri'] = Field(..., alias='@type')
    Annotation: Optional[ShortString] = None
    Content: AnyUrl


class DeviceClass(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.DeviceClass'] = Field(..., alias='@type')
    Manufacturer: Optional[str] = None
    Model: Optional[str] = None
    OtherType: Optional[str] = None
    Type: Optional[DeviceType] = None


class ExternalIdentifier(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.ExternalIdentifier'] = Field(..., alias='@type')
    Label: Optional[str] = None
    OtherType: Optional[str] = None
    Type: IdentifierType
    Value: str


class Hours(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.Hours'] = Field(..., alias='@type')
    Day: Optional[DayType] = None
    EndTime: TimeWithZone
    Label: Optional[str] = None
    StartTime: TimeWithZone


class InternationalizedText(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.InternationalizedText'] = Field(..., alias='@type')
    Label: Optional[str] = None
    Text: List[LanguageString] = Field(..., min_items=1)


class OtherCounts(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.OtherCounts'] = Field(..., alias='@type')
    DeviceClass: Optional[DeviceClass] = None
    GpUnitId: str
    Overvotes: Optional[float] = None
    Undervotes: Optional[float] = None
    WriteIns: Optional[int] = None


class ReportingDevice(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.ReportingDevice'] = Field(..., alias='@type')
    ComposingGpUnitIds: Optional[List[str]] = Field(None, min_items=0)
    DeviceClass: Optional[DeviceClass] = None
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    Name: Optional[InternationalizedText] = None
    SerialNumber: Optional[str] = None


class Schedule(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.Schedule'] = Field(..., alias='@type')
    EndDate: Optional[date] = None
    Hours: Optional[List[Hours]] = Field(None, min_items=0)
    IsOnlyByAppointment: Optional[bool] = None
    IsOrByAppointment: Optional[bool] = None
    IsSubjectToChange: Optional[bool] = None
    Label: Optional[str] = None
    StartDate: Optional[date] = None


class SpatialDimension(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.SpatialDimension'] = Field(..., alias='@type')
    MapUri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)
    SpatialExtent: Optional[SpatialExtent] = None


class VoteCounts(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.VoteCounts'] = Field(..., alias='@type')
    Count: float
    DeviceClass: Optional[DeviceClass] = None
    GpUnitId: str
    IsSuppressedForPrivacy: Optional[bool] = None
    OtherType: Optional[str] = None
    Round: Optional[int] = None
    Type: CountItemType


class BallotCounts(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.BallotCounts'] = Field(..., alias='@type')
    BallotsCast: Optional[int] = None
    BallotsOutstanding: Optional[int] = None
    BallotsRejected: Optional[int] = None
    DeviceClass: Optional[DeviceClass] = None
    GpUnitId: str
    IsSuppressedForPrivacy: Optional[bool] = None
    OtherType: Optional[str] = None
    Round: Optional[int] = None
    Type: CountItemType


class BallotMeasureSelection(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.BallotMeasureSelection'] = Field(..., alias='@type')
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    Selection: InternationalizedText
    SequenceOrder: Optional[int] = None
    VoteCounts: Optional[List[VoteCounts]] = Field(None, min_items=0)


class BallotStyle(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.BallotStyle'] = Field(..., alias='@type')
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    GpUnitIds: List[str] = Field(..., min_items=1)
    ImageUri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)
    OrderedContent: Optional[List[Union[OrderedContest, OrderedHeader]]] = Field(
        None, min_items=0
    )
    PartyIds: Optional[List[str]] = Field(None, min_items=0)


class CandidateSelection(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.CandidateSelection'] = Field(..., alias='@type')
    CandidateIds: Optional[List[str]] = Field(None, min_items=0)
    EndorsementPartyIds: Optional[List[str]] = Field(None, min_items=0)
    IsWriteIn: Optional[bool] = None
    SequenceOrder: Optional[int] = None
    VoteCounts: Optional[List[VoteCounts]] = Field(None, min_items=0)


class ContactInformation(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.ContactInformation'] = Field(..., alias='@type')
    AddressLine: Optional[List[str]] = Field(None, min_items=0)
    Directions: Optional[InternationalizedText] = None
    Email: Optional[List[AnnotatedString]] = Field(None, min_items=0)
    Fax: Optional[List[AnnotatedString]] = Field(None, min_items=0)
    Label: Optional[str] = None
    LatLng: Optional[LatLng] = None
    Name: Optional[str] = None
    Phone: Optional[List[AnnotatedString]] = Field(None, min_items=0)
    Schedule: Optional[List[Schedule]] = Field(None, min_items=0)
    Uri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)


class ElectionAdministration(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.ElectionAdministration'] = Field(..., alias='@type')
    ContactInformation: Optional[ContactInformation] = None
    ElectionOfficialPersonIds: Optional[List[str]] = Field(None, min_items=0)
    Name: Optional[str] = None


class Header(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.Header'] = Field(..., alias='@type')
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    Name: InternationalizedText


class Office(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.Office'] = Field(..., alias='@type')
    ContactInformation: Optional[ContactInformation] = None
    Description: Optional[InternationalizedText] = None
    ElectionDistrictId: Optional[str] = None
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    FilingDeadline: Optional[date] = None
    IsPartisan: Optional[bool] = None
    Name: InternationalizedText
    OfficeHolderPersonIds: Optional[List[str]] = Field(None, min_items=0)
    Term: Optional[Term] = None


class Party(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.Party'] = Field(..., alias='@type')
    Abbreviation: Optional[InternationalizedText] = None
    Color: Optional[HtmlColorString] = None
    ContactInformation: Optional[ContactInformation] = None
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    IsRecognizedParty: Optional[bool] = None
    LeaderPersonIds: Optional[List[str]] = Field(None, min_items=0)
    LogoUri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)
    Name: InternationalizedText
    PartyScopeGpUnitIds: Optional[List[str]] = Field(None, min_items=0)
    Slogan: Optional[InternationalizedText] = None


class PartySelection(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.PartySelection'] = Field(..., alias='@type')
    PartyIds: List[str] = Field(..., min_items=1)
    SequenceOrder: Optional[int] = None
    VoteCounts: Optional[List[VoteCounts]] = Field(None, min_items=0)


class Person(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.Person'] = Field(..., alias='@type')
    ContactInformation: Optional[List[ContactInformation]] = Field(None, min_items=0)
    DateOfBirth: Optional[date] = None
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    FirstName: Optional[str] = None
    FullName: Optional[InternationalizedText] = None
    Gender: Optional[str] = None
    LastName: Optional[str] = None
    MiddleName: Optional[List[str]] = Field(None, min_items=0)
    Nickname: Optional[str] = None
    PartyId: Optional[str] = None
    Prefix: Optional[str] = None
    Profession: Optional[InternationalizedText] = None
    Suffix: Optional[str] = None
    Title: Optional[InternationalizedText] = None


class ReportingUnit(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.ReportingUnit'] = Field(..., alias='@type')
    AuthorityIds: Optional[List[str]] = Field(None, min_items=0)
    ComposingGpUnitIds: Optional[List[str]] = Field(None, min_items=0)
    ContactInformation: Optional[ContactInformation] = None
    CountStatus: Optional[List[CountStatus]] = Field(None, min_items=0)
    ElectionAdministration: Optional[ElectionAdministration] = None
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    IsDistricted: Optional[bool] = None
    IsMailOnly: Optional[bool] = None
    Name: Optional[InternationalizedText] = None
    Number: Optional[str] = None
    OtherType: Optional[str] = None
    PartyRegistration: Optional[List[PartyRegistration]] = Field(None, min_items=0)
    SpatialDimension: Optional[SpatialDimension] = None
    SubUnitsReported: Optional[int] = None
    TotalSubUnits: Optional[int] = None
    Type: ReportingUnitType
    VotersParticipated: Optional[int] = None
    VotersRegistered: Optional[int] = None


class RetentionContest(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.RetentionContest'] = Field(..., alias='@type')
    Abbreviation: Optional[str] = None
    BallotSubTitle: Optional[InternationalizedText] = None
    BallotTitle: Optional[InternationalizedText] = None
    CandidateId: str
    ConStatement: Optional[InternationalizedText] = None
    ContestSelection: Optional[
        List[Union[PartySelection, BallotMeasureSelection, CandidateSelection]]
    ] = Field(None, min_items=0)
    CountStatus: Optional[List[CountStatus]] = Field(None, min_items=0)
    EffectOfAbstain: Optional[InternationalizedText] = None
    ElectionDistrictId: str
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    FullText: Optional[InternationalizedText] = None
    HasRotation: Optional[bool] = None
    InfoUri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)
    Name: str
    OfficeId: Optional[str] = None
    OtherCounts: Optional[List[OtherCounts]] = Field(None, min_items=0)
    OtherType: Optional[str] = None
    OtherVoteVariation: Optional[str] = None
    PassageThreshold: Optional[InternationalizedText] = None
    ProStatement: Optional[InternationalizedText] = None
    SequenceOrder: Optional[int] = None
    SubUnitsReported: Optional[int] = None
    SummaryText: Optional[InternationalizedText] = None
    TotalSubUnits: Optional[int] = None
    Type: Optional[BallotMeasureType] = None
    VoteVariation: Optional[VoteVariation] = None


class BallotMeasureContest(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.BallotMeasureContest'] = Field(..., alias='@type')
    Abbreviation: Optional[str] = None
    BallotSubTitle: Optional[InternationalizedText] = None
    BallotTitle: Optional[InternationalizedText] = None
    ConStatement: Optional[InternationalizedText] = None
    ContestSelection: Optional[
        List[Union[PartySelection, BallotMeasureSelection, CandidateSelection]]
    ] = Field(None, min_items=0)
    CountStatus: Optional[List[CountStatus]] = Field(None, min_items=0)
    EffectOfAbstain: Optional[InternationalizedText] = None
    ElectionDistrictId: str
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    FullText: Optional[InternationalizedText] = None
    HasRotation: Optional[bool] = None
    InfoUri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)
    Name: str
    OtherCounts: Optional[List[OtherCounts]] = Field(None, min_items=0)
    OtherType: Optional[str] = None
    OtherVoteVariation: Optional[str] = None
    PassageThreshold: Optional[InternationalizedText] = None
    ProStatement: Optional[InternationalizedText] = None
    SequenceOrder: Optional[int] = None
    SubUnitsReported: Optional[int] = None
    SummaryText: Optional[InternationalizedText] = None
    TotalSubUnits: Optional[int] = None
    Type: Optional[BallotMeasureType] = None
    VoteVariation: Optional[VoteVariation] = None


class Candidate(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.Candidate'] = Field(..., alias='@type')
    BallotName: InternationalizedText
    CampaignSlogan: Optional[InternationalizedText] = None
    ContactInformation: Optional[ContactInformation] = None
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    FileDate: Optional[date] = None
    IsIncumbent: Optional[bool] = None
    IsTopTicket: Optional[bool] = None
    PartyId: Optional[str] = None
    PersonId: Optional[str] = None
    PostElectionStatus: Optional[CandidatePostElectionStatus] = None
    PreElectionStatus: Optional[CandidatePreElectionStatus] = None


class CandidateContest(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.CandidateContest'] = Field(..., alias='@type')
    Abbreviation: Optional[str] = None
    BallotSubTitle: Optional[InternationalizedText] = None
    BallotTitle: Optional[InternationalizedText] = None
    ContestSelection: Optional[
        List[Union[PartySelection, BallotMeasureSelection, CandidateSelection]]
    ] = Field(None, min_items=0)
    CountStatus: Optional[List[CountStatus]] = Field(None, min_items=0)
    ElectionDistrictId: str
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    HasRotation: Optional[bool] = None
    Name: str
    NumberElected: Optional[int] = None
    NumberRunoff: Optional[int] = None
    OfficeIds: Optional[List[str]] = Field(None, min_items=0)
    OtherCounts: Optional[List[OtherCounts]] = Field(None, min_items=0)
    OtherVoteVariation: Optional[str] = None
    PrimaryPartyIds: Optional[List[str]] = Field(None, min_items=0)
    SequenceOrder: Optional[int] = None
    SubUnitsReported: Optional[int] = None
    TotalSubUnits: Optional[int] = None
    VoteVariation: Optional[VoteVariation] = None
    VotesAllowed: int


class Coalition(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.Coalition'] = Field(..., alias='@type')
    Abbreviation: Optional[InternationalizedText] = None
    Color: Optional[HtmlColorString] = None
    ContactInformation: Optional[ContactInformation] = None
    ContestIds: Optional[List[str]] = Field(None, min_items=0)
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    IsRecognizedParty: Optional[bool] = None
    LeaderPersonIds: Optional[List[str]] = Field(None, min_items=0)
    LogoUri: Optional[List[AnnotatedUri]] = Field(None, min_items=0)
    Name: InternationalizedText
    PartyIds: Optional[List[str]] = Field(None, min_items=0)
    PartyScopeGpUnitIds: Optional[List[str]] = Field(None, min_items=0)
    Slogan: Optional[InternationalizedText] = None


class PartyContest(BaseModel):
    class Config:
        extra = Extra.forbid

    _id: str = Field(..., alias='@id')
    _type: Literal['ElectionResults.PartyContest'] = Field(..., alias='@type')
    Abbreviation: Optional[str] = None
    BallotSubTitle: Optional[InternationalizedText] = None
    BallotTitle: Optional[InternationalizedText] = None
    ContestSelection: Optional[
        List[Union[PartySelection, BallotMeasureSelection, CandidateSelection]]
    ] = Field(None, min_items=0)
    CountStatus: Optional[List[CountStatus]] = Field(None, min_items=0)
    ElectionDistrictId: str
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    HasRotation: Optional[bool] = None
    Name: str
    OtherCounts: Optional[List[OtherCounts]] = Field(None, min_items=0)
    OtherVoteVariation: Optional[str] = None
    SequenceOrder: Optional[int] = None
    SubUnitsReported: Optional[int] = None
    TotalSubUnits: Optional[int] = None
    VoteVariation: Optional[VoteVariation] = None


class Election(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.Election'] = Field(..., alias='@type')
    BallotCounts: Optional[List[BallotCounts]] = Field(None, min_items=0)
    BallotStyle: Optional[List[BallotStyle]] = Field(None, min_items=0)
    Candidate: Optional[List[Candidate]] = Field(None, min_items=0)
    ContactInformation: Optional[ContactInformation] = None
    Contest: Optional[
        List[
            Union[
                PartyContest, BallotMeasureContest, CandidateContest, RetentionContest
            ]
        ]
    ] = Field(None, min_items=0)
    CountStatus: Optional[List[CountStatus]] = Field(None, min_items=0)
    ElectionScopeId: str
    EndDate: date
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    Name: InternationalizedText
    OtherType: Optional[str] = None
    StartDate: date
    Type: ElectionType


class ElectionReport(BaseModel):
    class Config:
        extra = Extra.forbid

    _type: Literal['ElectionResults.ElectionReport'] = Field(..., alias='@type')
    Election: Optional[List[Election]] = Field(None, min_items=0)
    ExternalIdentifier: Optional[List[ExternalIdentifier]] = Field(None, min_items=0)
    Format: ReportDetailLevel
    GeneratedDate: DateTimeWithZone
    GpUnit: Optional[List[Union[ReportingDevice, ReportingUnit]]] = Field(
        None, min_items=0
    )
    Header: Optional[List[Header]] = Field(None, min_items=0)
    IsTest: Optional[bool] = None
    Issuer: str
    IssuerAbbreviation: str
    Notes: Optional[str] = None
    Office: Optional[List[Office]] = Field(None, min_items=0)
    OfficeGroup: Optional[List[OfficeGroup]] = Field(None, min_items=0)
    Party: Optional[List[Union[Party, Coalition]]] = Field(None, min_items=0)
    Person: Optional[List[Person]] = Field(None, min_items=0)
    SequenceEnd: int
    SequenceStart: int
    Status: ResultsStatus
    TestType: Optional[str] = None
    VendorApplicationId: str


OfficeGroup.update_forward_refs()
OrderedHeader.update_forward_refs()
